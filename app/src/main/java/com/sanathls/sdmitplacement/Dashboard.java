package com.sanathls.sdmitplacement;

import android.Manifest;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;

import android.os.Environment;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.util.Base64;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.app.ActivityCompat;
import androidx.core.view.GravityCompat;
import androidx.appcompat.app.ActionBarDrawerToggle;

import android.view.MenuItem;

import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.AdView;
import com.google.android.gms.ads.MobileAds;
import com.google.android.gms.ads.reward.RewardItem;
import com.google.android.gms.ads.reward.RewardedVideoAd;
import com.google.android.gms.ads.initialization.InitializationStatus;
import com.google.android.gms.ads.initialization.OnInitializationCompleteListener;
import com.google.android.gms.ads.reward.RewardedVideoAdListener;
import com.google.android.material.navigation.NavigationView;

import androidx.drawerlayout.widget.DrawerLayout;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Files;

import javax.net.ssl.HttpsURLConnection;

public class Dashboard extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener, RewardedVideoAdListener {

    TextView tv_name,tv_email;
    ProgressDialog progressDialog;
    String user_name,user_email,user_role,user_display,cgpa;
    ListView listView;
    Context ctx;
    Activity activity;
    Menu menu;
    ImageView iv_user;
    static final int GALLERY_REQUEST =101;
    private static final int RC_HANDLE_PERM = 100;
    private RewardedVideoAd mRewardedVideoAd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.dashboard_layout);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);


        //new

        MobileAds.initialize(this, getString(R.string.app_id));
// Use an activity context to get the rewarded video instance.
        mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(this);
        mRewardedVideoAd.setRewardedVideoAdListener(this);

        mRewardedVideoAd.loadAd(getString(R.string.ad_reward_id),
                new AdRequest.Builder().build());

        //end

        MobileAds.initialize(this, new OnInitializationCompleteListener() {
            @Override
            public void onInitializationComplete(InitializationStatus initializationStatus) {
            }
        });
        AdView mAdView = findViewById(R.id.adView);
        AdRequest adRequest = new AdRequest.Builder().build();
        mAdView.loadAd(adRequest);





        ctx=this;
        activity=this;

        Bundle bundle=getIntent().getExtras();
        user_name=bundle.getString("user_name");
        user_email=bundle.getString("user_email");
        user_role=bundle.getString("user_role");
        user_display=bundle.getString("user_display");
        cgpa=bundle.getString("cgpa");
        if(!user_display.equals("0"))
            Toast.makeText(this,"Welcome "+user_name,Toast.LENGTH_SHORT).show();
//        try
//        {
//            user_display=bundle.getString("user_display");
//        }
//        catch (Exception e)
//        {
//            Toast.makeText(this,"Welcome "+user_name,Toast.LENGTH_SHORT).show();
//        }





        listView=(ListView) findViewById(R.id.list_view);

        progressDialog=new ProgressDialog(this);
        progressDialog.setTitle("Loading...");
        progressDialog.setMessage("Please Wait");
        progressDialog.setCancelable(false);
        progressDialog.show();

//        if(Internet.hasInternetAccess(this))
//        {


            NotificationsTask notifications=new NotificationsTask(this,this,listView,progressDialog);
            notifications.execute(user_name,user_email,user_role,cgpa);
//        }
//        else
//        {
//            progressDialog.cancel();
//            AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
//            //Setting Dialog Title
//            alertDialog.setTitle("No Connection !!!");
//            //Setting Dialog Icon
//            alertDialog.setIcon(R.mipmap.ic_launcher);
//            //Setting Dialog Message
//            alertDialog.setMessage("Check Your Internet Connection And Try Again ...");
//
//            alertDialog.setCancelable(false);
//
//            //On Pressing Setting button
//            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
//                @Override
//                public void onClick(DialogInterface dialog, int which) {
//                    dialog.dismiss();
//                    finishAffinity();
//                }
//            });
//            alertDialog.show();
//        }



        VersionTask versionTask=new VersionTask(this,this);
        versionTask.execute();



        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        NavigationView navigationView = findViewById(R.id.nav_view);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();
        navigationView.setNavigationItemSelectedListener(this);

        View header = navigationView.getHeaderView(0);
       tv_name = (TextView) header.findViewById(R.id.tv_user_name);
        tv_email = (TextView) header.findViewById(R.id.tv_user_email);
        iv_user = (ImageView) header.findViewById(R.id.ivUser);

        progressDialog=new ProgressDialog(this);
        progressDialog.setTitle("Loading...");
        progressDialog.setMessage("Please Wait.. Your Profile photo is loading...");
        progressDialog.setCancelable(false);
        progressDialog.show();
        GetImageTask getImageTask = new GetImageTask(this,this,iv_user,progressDialog);
        getImageTask.execute(user_email);

        tv_name.setText(user_name);
        tv_email.setText(user_email);


//        String photo = "";
//

        if(user_role.equals("1"))
        {
            menu=navigationView.getMenu();
            if(menu!= null)
            {
                menu.findItem(R.id.send_notification).setVisible(true);
                menu.findItem(R.id.users).setVisible(true);
                menu.findItem(R.id.education_details).setVisible(false);
            }
        }
        else
        {
            float f;
            try
            {
                f=Float.parseFloat(cgpa);
            }
            catch (Exception e)
            {
                f = 0;
            }

            if(f <= 0)
            {
//                Toast.makeText(ctx,"flloat"+f,Toast.LENGTH_LONG).show();
                try {
                    new AlertDialog.Builder(this)
                            .setIcon(R.mipmap.ic_launcher)
                            .setTitle(getResources().getString(R.string.app_name))
                            .setMessage("Please Fill Your Education Details")
                            .setCancelable(false)
                            .setPositiveButton(getResources().getString(R.string.yes_dialog), new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    Intent intent=new Intent(ctx,EducationDetails.class);
                                    intent.putExtra("user_email",user_email);
                                    startActivity(intent);
                                }
                            })
                            .setNegativeButton(getResources().getString(R.string.no_dialog), new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                    activity.finishAffinity();
                                }
                            })
                            .show();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            Log.e("delay","yes 1");
            delay();
        }



        final String[] permissions = new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.READ_EXTERNAL_STORAGE};
        if (!ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.CAMERA) && !ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE) && !ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.WRITE_EXTERNAL_STORAGE))
        {
            ActivityCompat.requestPermissions(this, permissions, RC_HANDLE_PERM);
            return;
        }

        final Activity thisActivity = this;

        DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                ActivityCompat.requestPermissions(thisActivity, permissions, RC_HANDLE_PERM);
            }
        };

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(R.string.app_name)
                .setMessage("Please Provide Storage Access")
                .setPositiveButton("OK", listener)
                .show();







    }


    void delay()
    {
        Log.e("delay","yes");
        new android.os.Handler().postDelayed(
                new Runnable() {
                    public void run() {
                        if (mRewardedVideoAd.isLoaded()) {
                            Log.e("reward ads ","loaded");
                            mRewardedVideoAd.show();
                        }
                        else
                        {
                            Log.e("reward ads ","not loaded");
                            delay();
                        }
                    }
                },
                1000);
    }




    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
//        for(int i : grantResults)
//            Log.d(TAG,"result : "+i);
        if (requestCode != RC_HANDLE_PERM) {
//            Log.d(TAG, "Got unexpected permission result: " + requestCode);
            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
            return;
        }

        if (grantResults.length != 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED  && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
            // We have permission to access the camera, so create the camera source.
//            Log.d(TAG, "Camera permission granted - initializing camera source.");
//            init();
            return;
        }

        // If we've reached this part of the method, it means that the user hasn't granted the app
        // access to the camera. Notify the user and exit.
//        Log.e(TAG, "Permission not granted: results len = " + grantResults.length +
//                " Result code = " + (grantResults.length > 0 ? grantResults[0] : "(empty)"));
        DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int id) {
                finishAffinity();
            }
        };
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle(R.string.app_name)
                .setMessage("Please Provide Storage Access")
                .setPositiveButton("Ok", listener)
                .show();
    }

    @Override
    public void onBackPressed() {
        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START))
        {
            drawer.closeDrawer(GravityCompat.START);
        }
        else
        {
            new AlertDialog.Builder(this)
                    .setIcon(R.mipmap.ic_launcher)
                    .setTitle(getString(R.string.app_name))
                    .setMessage(getString(R.string.msg_dialog))
                    .setPositiveButton(getString(R.string.yes_dialog), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                            finishAffinity();//changed by sanath from finish
                        }
                    })
                    .setNegativeButton(getString(R.string.no_dialog), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    })
                    .show();
        }
    }


    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.nav_home)
        {
            progressDialog.setTitle("Loading...");
            progressDialog.setMessage("Please Wait");
            progressDialog.setCancelable(false);
            progressDialog.show();

//            if(Internet.hasInternetAccess(this))
//            {
                NotificationsTask notifications=new NotificationsTask(this,this,listView,progressDialog);
                notifications.execute(user_name,user_email,user_role,cgpa);
//            }
//            else
//            {
//                progressDialog.cancel();
//                AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
//                //Setting Dialog Title
//                alertDialog.setTitle("No Connection !!!");
//                //Setting Dialog Icon
//                alertDialog.setIcon(R.mipmap.ic_launcher);
//                //Setting Dialog Message
//                alertDialog.setMessage("Check Your Internet Connection And Try Again ...");
//
//                alertDialog.setCancelable(false);
//
//                //On Pressing Setting button
//                alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                        finishAffinity();
//                    }
//                });
//                alertDialog.show();
//            }
        }
        else if (id == R.id.change_password)
        {
            Intent intent=new Intent(this,ChangePassword.class);
            intent.putExtra("user_email",user_email);
            startActivity(intent);
        }
        else if (id == R.id.share)
        {
            try {

                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
                sharingIntent.setType("text/plain");
                sharingIntent.putExtra(Intent.EXTRA_TEXT, "Hi! I have had a great experience with SDMIT Placement and highly recommend that you should try this app" + "\n" + " Use App link: https://play.google.com/store/apps/details?id=com.sanathls.sdmitplacement" );
                startActivity(Intent.createChooser(sharingIntent, getResources().getString(R.string.app_name)));
            } catch (Exception e) {
                e.printStackTrace();
                Toast.makeText(this,"Opps!! It seems that you have not installed any sharing app.",Toast.LENGTH_LONG).show();
            }
        }
        else if (id == R.id.logout)
        {
            progressDialog.cancel();
           final AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
            //Setting Dialog Title
            alertDialog.setTitle("No Connection !!!");
            //Setting Dialog Icon
            alertDialog.setIcon(R.mipmap.ic_launcher);
            //Setting Dialog Message
            alertDialog.setMessage("Check Your Internet Connection And Try Again ...");

            alertDialog.setCancelable(false);

            //On Pressing Setting button
            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    finishAffinity();
                }
            });

            try {
                new AlertDialog.Builder(this)
                        .setIcon(R.mipmap.ic_launcher)
                        .setTitle(getResources().getString(R.string.app_name))
                        .setMessage(getResources().getString(R.string.logout_msg))
                        .setCancelable(false)
                        .setPositiveButton(getResources().getString(R.string.yes_dialog), new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
//                                if(Internet.hasInternetAccess(ctx))
//                                {
                                    LogoutTask logoutTask=new LogoutTask(ctx,activity,progressDialog);
                                    logoutTask.execute(user_email);
//                                }
//                                else
//                                {
//
//                                    alertDialog.show();
//                                }
                            }
                        })
                        .setNegativeButton(getResources().getString(R.string.no_dialog), new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        })
                        .show();

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        else if(id == R.id.send_notification)
        {
            //Toast.makeText(this,"send ",Toast.LENGTH_LONG).show();
            Intent intent=new Intent(this,SendNotification.class);
            intent.putExtra("user_name",user_name);
            intent.putExtra("user_email",user_email);
            intent.putExtra("user_role",user_role);
            intent.putExtra("cgpa",cgpa);
            startActivity(intent);
        }
        else if(id == R.id.users)
        {
            //Toast.makeText(this,"filter ",Toast.LENGTH_LONG).show();
            Intent intent=new Intent(this,FilterUsers.class);
            intent.putExtra("user_email",user_email);
            startActivity(intent);
        }
        else if(id == R.id.education_details)
        {
            //Toast.makeText(this,"education ",Toast.LENGTH_LONG).show();
            Intent intent=new Intent(this,EducationDetails.class);
            intent.putExtra("user_email",user_email);
            startActivity(intent);
        }
        else if(id == R.id.visit_blog)
        {
            //Toast.makeText(this,"visit blog ",Toast.LENGTH_LONG).show();
            Intent i = new Intent(Intent.ACTION_VIEW);
            i.setData(Uri.parse("https://plctsdmitcse.blogspot.com/"));
            startActivity(i);
        }

        DrawerLayout drawer = findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    public void change_image(View view) {

//        Toast.makeText(ctx,"change image",Toast.LENGTH_LONG).show();
        try
        {
            Intent photoPickerIntent = new Intent(Intent.ACTION_GET_CONTENT);
            photoPickerIntent.setType("image/*");
            startActivityForResult(photoPickerIntent, GALLERY_REQUEST);
        }catch(Exception exp){
            Log.i("Error",exp.toString());
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode == Activity.RESULT_OK)
            switch (requestCode)
            {
                case GALLERY_REQUEST:
                    Uri selectedImage = data.getData();
                    try {
                        Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), selectedImage);

                            Log.e("uri",selectedImage.getPath());



                        String fileSize = null;
                        Cursor cursor = ctx.getContentResolver()
                                .query(selectedImage, null, null, null, null, null);
                        try {
                            if (cursor != null && cursor.moveToFirst()) {

                                // get file size
                                int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE);
                                if (!cursor.isNull(sizeIndex)) {
                                    fileSize = cursor.getString(sizeIndex);
                                }
                            }
                        } finally {
                            cursor.close();
                        }


                        long fileSizeinBytes = Long.parseLong(fileSize);
                        long fileSizeinKB = fileSizeinBytes/1024;
                        Log.e("file Size",fileSizeinKB+" KB");

                        //new
                        int width = bitmap.getWidth();
                        int height = bitmap.getHeight();
                        Log.e("width",""+width);
                        Log.e("height",""+height);

                        if(width > height)
                        {
                            Matrix matrix = new Matrix();
                            matrix.postRotate(90);
                            bitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, true);
                        }


                        ByteArrayOutputStream stream = new ByteArrayOutputStream();
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 65, stream);
                        byte[] imageInByte = stream.toByteArray();
                        //end


                        if(fileSizeinKB <= 4096)
                        {
                            //upload to server

                            String photo = Base64.encodeToString(imageInByte,Base64.DEFAULT);
                            Log.e("image in bytes", photo);
                            progressDialog.setTitle("Uploading...");
                            progressDialog.setMessage("Image is being Uploaded Please Wait...");
                            progressDialog.show();
                            ChangeImageTask changeImageTask = new ChangeImageTask(this,this,progressDialog,iv_user);
                            changeImageTask.execute(user_email,photo);


                        }
                        else
                        {
                            Toast.makeText(ctx,"Image Size must be less than 4 MB",Toast.LENGTH_LONG).show();
                        }


                    } catch (Exception e) {
                        Log.i("TAG", "Some exception " + e);
                    }
                    break;
            }
    }

    @Override
    public void onRewardedVideoAdLoaded() {

    }

    @Override
    public void onRewardedVideoAdOpened() {

    }

    @Override
    public void onRewardedVideoStarted() {

    }

    @Override
    public void onRewardedVideoAdClosed() {

    }

    @Override
    public void onRewarded(RewardItem rewardItem) {

    }

    @Override
    public void onRewardedVideoAdLeftApplication() {

    }

    @Override
    public void onRewardedVideoAdFailedToLoad(int i) {

    }

    @Override
    public void onRewardedVideoCompleted() {

    }
}

class ChangeImageTask extends AsyncTask<String,String,String>
{

    Context ctx;
    Activity activity;
    ProgressDialog progressDialog;
    ImageView iv_user;
    String user_email,photo;


    ChangeImageTask(Context ctx,Activity activity, ProgressDialog progressDialog, ImageView iv_user)
    {
        this.ctx=ctx;
        this.activity=activity;
        this.progressDialog=progressDialog;
        this.iv_user = iv_user;
    }



    @Override
    protected void onPreExecute() {

    }

    @Override
    protected String doInBackground(String... params) {


        user_email=params[0];
        photo=params[1];



        try {
            URL url=new URL(Constants.base_url+"userapi/change_image");
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            con.setDoInput(true);
            OutputStream os=con.getOutputStream();
            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));
            String data= URLEncoder.encode("user_email","UTF-8") +"="+URLEncoder.encode(user_email,"UTF-8")+"&"+
                    URLEncoder.encode("user_photo","UTF-8") +"="+URLEncoder.encode(photo,"UTF-8");
            bw.write(data);
            bw.flush();
            bw.close();
            os.close();
            InputStream is=con.getInputStream();
            BufferedReader br=new BufferedReader(new InputStreamReader(is,"iso-8859-1"));
            String response="",line="";
            while((line=br.readLine()) != null)
            {
                response+=line;
            }
            br.close();
            is.close();
            con.disconnect();
            return response;

        } catch (MalformedURLException e) {
            Log.e("malformedurl",e.toString());
            return "offline";
        } catch (IOException e) {
            Log.e("ioexcetion",e.toString());
            return "offline";
        }


    }

    @Override
    protected void onPostExecute(String response) {

        progressDialog.cancel();
        //Toast.makeText(ctx,response,Toast.LENGTH_LONG).show();
        Log.e("Response",response);

        try {
            JSONObject jsonObject=new JSONObject(response);
            String result=jsonObject.getString("result");
            if(result.equals("failure"))
            {
                String message=jsonObject.getString("message");
                Log.e("message",message);
                Toast.makeText(ctx,message,Toast.LENGTH_LONG).show();
            }
            else if (result.equals("success"))
            {
                Toast.makeText(ctx,"Photo Update Success.",Toast.LENGTH_SHORT).show();
                byte[] imageAsBytes = Base64.decode(photo.getBytes(), Base64.DEFAULT);
                iv_user.setImageBitmap(BitmapFactory.decodeByteArray(imageAsBytes, 0, imageAsBytes.length));
            }
            else
            {
                Toast.makeText(ctx,"Photo Update Failed.",Toast.LENGTH_LONG).show();
            }

        } catch (JSONException e) {

            AlertDialog.Builder alertDialog = new AlertDialog.Builder(ctx);
            //Setting Dialog Title
            alertDialog.setTitle("Cannot Connect To Server !!!");
            //Setting Dialog Icon
            alertDialog.setIcon(R.mipmap.ic_launcher);
            //Setting Dialog Message
            alertDialog.setMessage("Check Your Internet Connection Or Try Again Later ...");

            alertDialog.setCancelable(false);

            //On Pressing Setting button
            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    activity.finishAffinity();
                }
            });
            alertDialog.show();
        }

    }
}

class GetImageTask extends AsyncTask<String,String,String>
{

    Context ctx;
    Activity activity;
    ImageView iv_user;
    ProgressDialog progressDialog;
    String user_email;


    GetImageTask(Context ctx,Activity activity, ImageView iv_user, ProgressDialog progressDialog)
    {
        this.ctx=ctx;
        this.activity=activity;
        this.iv_user = iv_user;
        this.progressDialog = progressDialog;
    }



    @Override
    protected void onPreExecute() {

    }

    @Override
    protected String doInBackground(String... params) {


        user_email=params[0];

        try {
            URL url=new URL(Constants.base_url+"userapi/get_image");
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            con.setDoInput(true);
            OutputStream os=con.getOutputStream();
            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));
            String data= URLEncoder.encode("user_email","UTF-8") +"="+URLEncoder.encode(user_email,"UTF-8");
            bw.write(data);
            bw.flush();
            bw.close();
            os.close();
            InputStream is=con.getInputStream();
            BufferedReader br=new BufferedReader(new InputStreamReader(is,"iso-8859-1"));
            String response="",line="";
            while((line=br.readLine()) != null)
            {
                response+=line;
            }
            br.close();
            is.close();
            con.disconnect();
            return response;

        } catch (MalformedURLException e) {
            Log.e("malformedurl",e.toString());
            return "offline";
        } catch (IOException e) {
            Log.e("ioexcetion",e.toString());
            return "offline";
        }


    }

    @Override
    protected void onPostExecute(String response) {

        progressDialog.cancel();
        //Toast.makeText(ctx,response,Toast.LENGTH_LONG).show();
        Log.e("Response",response);

        try {
            JSONObject jsonObject=new JSONObject(response);
            String result=jsonObject.getString("result");
            if(result.equals("failure"))
            {
                String message=jsonObject.getString("message");
                Log.e("message",message);
                Toast.makeText(ctx,message,Toast.LENGTH_LONG).show();
            }
            else if (result.equals("success"))
            {
                String data=jsonObject.getString("0");
                JSONObject jsonDataObject=new JSONObject(data);
                String photo = jsonDataObject.getString("user_photo");
                try
                {
                    if(photo != null && photo.length() > 4)
                    {
                        byte[] imageAsBytes = Base64.decode(photo.getBytes(), Base64.DEFAULT);
                        iv_user.setImageBitmap(BitmapFactory.decodeByteArray(imageAsBytes, 0, imageAsBytes.length));
                    }
                    else
                    {
                        iv_user.setImageResource(R.drawable.profile);
                    }
                }
                catch (Exception e)
                {
                    iv_user.setImageResource(R.drawable.profile);
                }

            }
            else
            {
                Toast.makeText(ctx,"Photo Update Failed.",Toast.LENGTH_LONG).show();
            }

        } catch (JSONException e) {

            AlertDialog.Builder alertDialog = new AlertDialog.Builder(ctx);
            //Setting Dialog Title
            alertDialog.setTitle("Cannot Connect To Server !!!");
            //Setting Dialog Icon
            alertDialog.setIcon(R.mipmap.ic_launcher);
            //Setting Dialog Message
            alertDialog.setMessage("Check Your Internet Connection Or Try Again Later ...");

            alertDialog.setCancelable(false);

            //On Pressing Setting button
            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    activity.finishAffinity();
                }
            });
            alertDialog.show();
        }

    }
}




class NotificationsTask extends AsyncTask<String,String,String>
{

    Context ctx;
    Activity activity;
    ListView listView;
    ProgressDialog progressDialog;
    String user_name,user_email,user_role,cgpa;

    NotificationsTask(Context ctx,Activity activity,ListView listView,ProgressDialog progressDialog)
    {
        this.ctx=ctx;
        this.activity=activity;
        this.listView=listView;
        this.progressDialog=progressDialog;
    }



    @Override
    protected void onPreExecute() {

    }

    @Override
    protected String doInBackground(String... params) {

        user_name=params[0];
        user_email=params[1];
        user_role=params[2];
        cgpa=params[3];


        try {
            URL url=new URL(Constants.base_url+"userapi/notifications");
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            con.setDoInput(true);
            OutputStream os=con.getOutputStream();
            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));
            String data= URLEncoder.encode("user_email","UTF-8") +"="+URLEncoder.encode(user_email,"UTF-8");
            bw.write(data);
            bw.flush();
            bw.close();
            os.close();
            InputStream is=con.getInputStream();
            BufferedReader br=new BufferedReader(new InputStreamReader(is,"iso-8859-1"));
            String response="",line="";
            while((line=br.readLine()) != null)
            {
                response+=line;
            }
            br.close();
            is.close();
            con.disconnect();
            return response;

        } catch (MalformedURLException e) {
            Log.e("malformedurl",e.toString());
            return "offline";
        } catch (IOException e) {
            Log.e("ioexcetion",e.toString());
            return "offline";
        }


    }

    @Override
    protected void onPostExecute(String response) {

        progressDialog.cancel();
        //Toast.makeText(ctx,response,Toast.LENGTH_LONG).show();
        Log.e("Response",response);

            try {
                JSONObject jsonObject=new JSONObject(response);
                String result=jsonObject.getString("result");
                if(result.equals("failure"))
                {
                    String message=jsonObject.getString("message");
                    Log.e("message",message);
                    Toast.makeText(ctx,message,Toast.LENGTH_LONG).show();
                }
                else if (result.equals("success"))
                {
                    //Toast.makeText(this,"Login Success.",Toast.LENGTH_SHORT).show();
                    String arraysize=jsonObject.getString("size");

                    int size=Integer.parseInt(arraysize);

                    String[] title=new String[size],description = new String[size],link = new String[size],id=new String[size];

                    for(int i=0;i<size;i++)
                    {
                        title[i]=jsonObject.getString("title"+i);
                        description[i]=jsonObject.getString("description"+i);
                        link[i]=jsonObject.getString("link"+i);
                        id[i]=jsonObject.getString("id"+i);
                    }

                    final ArrayAdapter<String> titleadapter=new ArrayAdapter<String>(ctx,R.layout.list_view_item,android.R.id.text1,title);
                    listView.setAdapter(titleadapter);

                    final ArrayAdapter<String> descriptionadapter=new ArrayAdapter<String>(ctx,R.layout.list_view_item,android.R.id.text1,description);

                    final ArrayAdapter<String> linkadapter=new ArrayAdapter<String>(ctx,R.layout.list_view_item,android.R.id.text1,link);

                    final ArrayAdapter<String> idadapter=new ArrayAdapter<String>(ctx,R.layout.list_view_item,android.R.id.text1,id);


                    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            String current_title=titleadapter.getItem(position);
                            String current_description=descriptionadapter.getItem(position);
                            String current_link=linkadapter.getItem(position);
                            String current_id=idadapter.getItem(position);
                            //Toast.makeText(ctx,current_description+"\n"+current_link,Toast.LENGTH_SHORT).show();
                            Intent intent=new Intent(ctx, Notification.class);
                            intent.putExtra("current_title",current_title);
                            intent.putExtra("current_description",current_description);
                            intent.putExtra("current_link",current_link);
                            intent.putExtra("id",current_id);
                            intent.putExtra("user_name",user_name);
                            intent.putExtra("user_email",user_email);
                            intent.putExtra("user_role",user_role);
                            intent.putExtra("cgpa",cgpa);
                            ctx.startActivity(intent);


                        }
                    });


                }
                else
                {
                    Toast.makeText(ctx,"No Notifications",Toast.LENGTH_LONG).show();
                }

            } catch (JSONException e) {

                AlertDialog.Builder alertDialog = new AlertDialog.Builder(ctx);
                //Setting Dialog Title
                alertDialog.setTitle("Cannot Connect To Server !!!");
                //Setting Dialog Icon
                alertDialog.setIcon(R.mipmap.ic_launcher);
                //Setting Dialog Message
                alertDialog.setMessage("Check Your Internet Connection Or Try Again Later ...");

                alertDialog.setCancelable(false);

                //On Pressing Setting button
                alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        activity.finishAffinity();
                    }
                });
                alertDialog.show();
            }

    }
}

class LogoutTask extends AsyncTask<String,String,String>
{

    Context ctx;
    Activity activity;
    ProgressDialog progressDialog;

    LogoutTask(Context ctx,Activity activity,ProgressDialog progressDialog)
    {
        this.ctx=ctx;
        this.activity=activity;
        this.progressDialog=progressDialog;
    }



    @Override
    protected void onPreExecute() {

    }

    @Override
    protected String doInBackground(String... params) {

        String user_email=params[0];


        try {
            URL url=new URL(Constants.base_url+"userapi/logout");
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            con.setDoInput(true);
            OutputStream os=con.getOutputStream();
            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));
            String data= URLEncoder.encode("user_email","UTF-8") +"="+URLEncoder.encode(user_email,"UTF-8");
            bw.write(data);
            bw.flush();
            bw.close();
            os.close();
            InputStream is=con.getInputStream();
            BufferedReader br=new BufferedReader(new InputStreamReader(is,"iso-8859-1"));
            String response="",line="";
            while((line=br.readLine()) != null)
            {
                response+=line;
            }
            br.close();
            is.close();
            con.disconnect();
            return response;

        } catch (MalformedURLException e) {
            Log.e("malformedurl",e.toString());
            return "offline";
        } catch (IOException e) {
            Log.e("ioexcetion",e.toString());
            return "offline";
        }


    }

    @Override
    protected void onPostExecute(String response) {

        progressDialog.cancel();
        //Toast.makeText(ctx,response,Toast.LENGTH_LONG).show();
        Log.e("Response",response);


        try {
            JSONObject jsonObject=new JSONObject(response);
            String result=jsonObject.getString("result");
            if(result.equals("failure"))
            {
                String message=jsonObject.getString("message");
                Log.e("message",message);
                Toast.makeText(ctx,message,Toast.LENGTH_LONG).show();
            }
            else if (result.equals("success"))
            {
                Toast.makeText(ctx,"Logout Successful.",Toast.LENGTH_SHORT).show();
                Intent intent=new Intent(ctx,Login.class);
                ctx.startActivity(intent);
                activity.finish();

            }
            else
            {
                Toast.makeText(ctx,"Logout Failed",Toast.LENGTH_LONG).show();
            }

        } catch (JSONException e) {

            AlertDialog.Builder alertDialog = new AlertDialog.Builder(ctx);
            //Setting Dialog Title
            alertDialog.setTitle("Cannot Connect To Server !!!");
            //Setting Dialog Icon
            alertDialog.setIcon(R.mipmap.ic_launcher);
            //Setting Dialog Message
            alertDialog.setMessage("Check Your Internet Connection Or Try Again Later ...");

            alertDialog.setCancelable(false);

            //On Pressing Setting button
            alertDialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.dismiss();
                    activity.finishAffinity();
                }
            });
            alertDialog.show();
        }

    }
}


class VersionTask extends AsyncTask<String,String,String>
{

    Context ctx;
    Activity activity;

    VersionTask(Context ctx,Activity activity)
    {
        this.ctx=ctx;
        this.activity=activity;
    }



    @Override
    protected void onPreExecute() {

    }

    @Override
    protected String doInBackground(String... params) {



        try {
            URL url=new URL(Constants.base_url+"adminapi/version");
            HttpURLConnection con=(HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setDoOutput(true);
            con.setDoInput(true);
            OutputStream os=con.getOutputStream();
            BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(os,"UTF-8"));
            bw.write("");
            bw.flush();
            bw.close();
            os.close();
            InputStream is=con.getInputStream();
            BufferedReader br=new BufferedReader(new InputStreamReader(is,"iso-8859-1"));
            String response="",line="";
            while((line=br.readLine()) != null)
            {
                response+=line;
            }
            br.close();
            is.close();
            con.disconnect();
            return response;

        } catch (MalformedURLException e) {
            Log.e("malformedurl",e.toString());
            return "";
        } catch (IOException e) {
            Log.e("ioexcetion",e.toString());
            return "";
        }


    }

    @Override
    protected void onPostExecute(String response) {


        //Toast.makeText(ctx,response,Toast.LENGTH_LONG).show();
        Log.e("Response",response);


        try {
            JSONObject jsonObject=new JSONObject(response);
            int newver=Integer.parseInt(jsonObject.getString("versioncode"));
            int presentver= BuildConfig.VERSION_CODE;
            if( presentver < newver)
            {
                android.app.AlertDialog.Builder alertDialog = new android.app.AlertDialog.Builder(ctx);
                //Setting Dialog Title
                alertDialog.setTitle(R.string.app_name);
                //Setting Dialog Icon
                alertDialog.setIcon(R.mipmap.ic_launcher);
                //Setting Dialog Message
                alertDialog.setMessage("New App Update Available. Please Update The App To Continue");

                alertDialog.setCancelable(false);

                //On Pressing Setting button
                alertDialog.setPositiveButton("Update", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        Intent i = new Intent(Intent.ACTION_VIEW);
                        i.setData(Uri.parse("https://play.google.com/store/apps/details?id=com.sanathls.sdmitplacement"));
                        ctx.startActivity(i);
                        activity.finishAffinity();
                    }
                });
                alertDialog.show();
            }

        } catch (JSONException e)
        {


        }

    }


}




